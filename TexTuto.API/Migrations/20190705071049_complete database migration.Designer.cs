// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TexTuto.API.Data;

namespace TexTuto.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190705071049_complete database migration")]
    partial class completedatabasemigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("TexTuto.API.Models.Article", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("created_date");

                    b.Property<bool>("is_enabled");

                    b.Property<int>("sub_category");

                    b.Property<string>("title");

                    b.Property<DateTime>("updated_date");

                    b.Property<int>("user_id");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("TexTuto.API.Models.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("description");

                    b.Property<bool>("is_enabled");

                    b.HasKey("id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TexTuto.API.Models.Comment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("article_id");

                    b.Property<string>("content")
                        .HasColumnType("text");

                    b.Property<DateTime>("created_date");

                    b.Property<bool>("is_enabled");

                    b.Property<DateTime>("updated_date");

                    b.Property<int>("user_id");

                    b.HasKey("id");

                    b.HasIndex("article_id");

                    b.HasIndex("user_id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TexTuto.API.Models.Follower", b =>
                {
                    b.Property<int>("user_id");

                    b.Property<int>("follower_id");

                    b.HasKey("user_id", "follower_id");

                    b.HasIndex("follower_id");

                    b.ToTable("Followers");
                });

            modelBuilder.Entity("TexTuto.API.Models.FollowsArticle", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("article_id");

                    b.Property<int>("user_id");

                    b.HasKey("id");

                    b.HasIndex("article_id");

                    b.HasIndex("user_id");

                    b.ToTable("FollowsArticles");
                });

            modelBuilder.Entity("TexTuto.API.Models.Rate", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("article_id");

                    b.Property<DateTime>("created_date");

                    b.Property<string>("description");

                    b.Property<float>("rate");

                    b.Property<DateTime>("updated_date");

                    b.Property<int>("user_id");

                    b.HasKey("id");

                    b.HasIndex("article_id");

                    b.HasIndex("user_id");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("TexTuto.API.Models.Reply", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("comment_id");

                    b.Property<string>("content")
                        .HasColumnType("text");

                    b.Property<DateTime>("created_date");

                    b.Property<DateTime>("updated_date");

                    b.Property<int>("user_id");

                    b.HasKey("id");

                    b.HasIndex("comment_id");

                    b.HasIndex("user_id");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("TexTuto.API.Models.Step", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("article_id");

                    b.Property<string>("content")
                        .HasColumnType("text");

                    b.Property<DateTime>("created_date");

                    b.Property<bool>("is_enabled");

                    b.Property<DateTime>("updated_date");

                    b.HasKey("id");

                    b.HasIndex("article_id");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("TexTuto.API.Models.SubCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("category_id");

                    b.Property<string>("description");

                    b.Property<bool>("is_enabled");

                    b.HasKey("id");

                    b.HasIndex("category_id");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("TexTuto.API.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("email");

                    b.Property<string>("firstname");

                    b.Property<bool>("is_activated");

                    b.Property<string>("job");

                    b.Property<DateTime>("joined_date");

                    b.Property<string>("lastname");

                    b.Property<DateTime>("modified_date");

                    b.Property<byte[]>("password_hash");

                    b.Property<byte[]>("password_salt");

                    b.Property<int>("role");

                    b.Property<string>("username");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TexTuto.API.Models.Value", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Values");
                });

            modelBuilder.Entity("TexTuto.API.Models.Article", b =>
                {
                    b.HasOne("TexTuto.API.Models.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TexTuto.API.Models.Comment", b =>
                {
                    b.HasOne("TexTuto.API.Models.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("article_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TexTuto.API.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TexTuto.API.Models.Follower", b =>
                {
                    b.HasOne("TexTuto.API.Models.User", "UFollower")
                        .WithMany("Followers")
                        .HasForeignKey("follower_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TexTuto.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TexTuto.API.Models.FollowsArticle", b =>
                {
                    b.HasOne("TexTuto.API.Models.Article", "Article")
                        .WithMany("FollowsArticles")
                        .HasForeignKey("article_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TexTuto.API.Models.User", "User")
                        .WithMany("FollowsArticles")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TexTuto.API.Models.Rate", b =>
                {
                    b.HasOne("TexTuto.API.Models.Article", "Article")
                        .WithMany("Rates")
                        .HasForeignKey("article_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TexTuto.API.Models.User", "User")
                        .WithMany("Rates")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TexTuto.API.Models.Reply", b =>
                {
                    b.HasOne("TexTuto.API.Models.Comment", "Comment")
                        .WithMany("Replies")
                        .HasForeignKey("comment_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TexTuto.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TexTuto.API.Models.Step", b =>
                {
                    b.HasOne("TexTuto.API.Models.Article", "Article")
                        .WithMany("Steps")
                        .HasForeignKey("article_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TexTuto.API.Models.SubCategory", b =>
                {
                    b.HasOne("TexTuto.API.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
